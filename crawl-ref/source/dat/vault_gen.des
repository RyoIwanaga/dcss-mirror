###############################################################################
# vault_gen.des: Generation of the actual Vaults branch.
#
# Note that Vaults vaults, entry, branch ends and Hall of Blades belond in
# vaults.des.
###############################################################################


#### Following vaults generate rooms. 
# These should not contain stairs at all, but can contain escape hatches and
# shafts.
NAME: subvault_test
TAGS: vaults_subvault allow_dup
{{
if not is_subvault() then
  return
end

local width, height = subvault_size()

extend_map { width=width, height=height, fill = '.' }

}}
MAP
ENDMAP

#### Following vaults generate stairs inside of rooms.
# stairs are generated by refusing to place anything on a square; making the
# glyph ' ' means that it will leave behind a "D" (or relevant) symbol in the
# build process; this symbol is then converted to a relevant stair.
#
# Relevant rooms will never be too small for the amount of stairs asked for.

# vaults_stairvault1 vaults should all generated one stair per-room.
NAME: subvault_stairs1
TAGS: vaults_stairvault1 allow_dup
{{
if not is_subvault() then return end

local width, height = subvault_size()

extend_map { width=width, height=height, fill = '.' }
mapgrd[crawl.random2(width)][crawl.random2(height)] = " "
}}
MAP
ENDMAP

# vaults_stairvault2 must generate two stairs per room.
NAME: subvault_stairs2
TAGS: vaults_stairvault2 allow_dup
{{
if not is_subvault() then return end

local width, height = subvault_size()

extend_map { width=width, height=height, fill = '.' }

local count = 2
while count > 0 do
    local x = crawl.random2(width)
    local y = crawl.random2(height)
    if mapgrd[x][y] ~= " " then
        mapgrd[x][y] = " "
        count = count - 1
    end
end
}}
MAP
ENDMAP

# must generate three stairs per room
NAME: subvault_stairs3
TAGS: vaults_stairvault3 allow_dup
{{
if not is_subvault() then return end

local width, height = subvault_size()

extend_map { width=width, height=height, fill = '.' }

local count = 3
while count > 0 do
    local x = crawl.random2(width)
    local y = crawl.random2(height)
    if mapgrd[x][y] ~= " " then
        mapgrd[x][y] = " "
        count = count - 1
    end
end}}
MAP
ENDMAP

# The actual builders
NAME: layout_vaults
ORIENT: encompass
TAGS: layout allow_dup no_monster_gen no_item_gen
{{
    function get_stair (count)
        stairs = {"{", "(", "[", "}", ")", "]"}
        return stairs[count+1]
    end

    local gxm, gym = dgn.max_bounds()

    extend_map{width = gxm, height = gym, fill = 'x'}
    fill_area{fill = 'x'}

    local temp_rand = crawl.random2(8)
    local wall_type_room
    local wall_type
    local stair_count = 0
    local rooms = {}

    local xs = 0
    local ys = 0
    local ax1 = 0
    local bx2 = 0
    local ay1 = 0
    local by2 = 0
    local i, j

    if temp_rand > 4 then
        wall_type = 'x'
    elseif temp_rand  > 2 then
        wall_type = 'c'
    else
        wall_type = 'v'
    end

    if crawl.one_chance_in(100) then
        wall_type = 'b'
    end

    fill_area { x1=8, y1=8, x2=gxm-9, y2=gym-9, fill="." }

    for i = 0, 5 do
        for j = 0, 4 do
            xs = 8 + (i * 13)
            ys = 8 + (j * 14)
            a1 = xs + crawl.random2avg(5, 2);
            a2 = ys + crawl.random2avg(5, 2);
            b1 = xs + 11 - crawl.random2avg(5, 2);
            b2 = ys + 11 - crawl.random2avg(5, 2);

            temp_rand = crawl.random2(280);

            if temp_rand > 39 and is_valid_coord {x=a1, y=a2} and is_valid_coord{x=b1, y=b2} then
                if temp_rand > 63 then
                    wall_type_room = wall_type
                elseif temp_rand > 54 then
                    wall_type_room = "c"
                elseif temp_rand > 45 then
                    wall_type_room = "x"
                else
                    wall_type_room = "v"
                end

                if crawl.one_chance_in(250) then
                    wall_type_room = "b"
                end

                table.insert(rooms, {a1, a2, b1, b2})
                make_box { x1=a1, y1=a2, x2=b1, y2=b2, wall=wall_type_room }
            end
        end
    end

    for _, room in ipairs(rooms) do
        local doors = 1 + crawl.random2(5) - crawl.random2(3)
        if doors < 1 then
            doors = 1
        end

        if doors > 3 and crawl.one_chance_in(3) then
            doors = 2
        end

        make_box_doors {x1=room[1], y1=room[2], x2=room[3], y2=room[4], number=doors}
    end

    local stair = 0
    while stair <= 5 do
        local index = crawl.random2(#rooms) + 1
        local room = rooms[index]
        local area = (room[3] - room[1]) * (room[4] - room[2])
        table.remove(rooms, index)
        fill_area {x1 = room[1]+1, y1=room[2]+1, x2=room[3]-1, y2=room[4]-1, fill="D"}
        if crawl.coinflip() and stair < 5 and area > 2 then
            subvault("D : vaults_stairvault2")
            nsubst("D = 1:" .. get_stair(stair) .. " / 1:" .. get_stair(stair+1) .. " / *:.")
            stair = stair + 1
        elseif crawl.coinflip(3) and stair < 4 and area > 3 then
            subvault("D : vaults_stairvault3")
            nsubst("D = 1:" .. get_stair(stair) .. " / 1:" .. get_stair(stair+1) ..
                   " / 1:" .. get_stair(stair+2) .. " / *:.")
            stair = stair + 2
        else
            subvault("D : vaults_stairvault1")
            nsubst("D = 1:" .. get_stair(stair) .. " / *:.")
        end
        stair = stair + 1
    end

    for _, room in ipairs(rooms) do
        fill_area {x1 = room[1]+1, y1=room[2]+1, x2=room[3]-1, y2=room[4]-1, fill="X"}
        subvault("X : vaults_subvault")
    end
}}
MAP
ENDMAP
